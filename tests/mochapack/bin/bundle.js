!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t,e){
/*!
 * @license :taj - V1.0.0 - 23/08/2020
 * https://github.com/ujjwalguptaofficial/taj
 * Copyright (c) 2020 @Ujjwal Gupta; Licensed ISC
 */
t.exports=function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);var r=n(1);n.d(e,"Component",function(){return r.Component}),n.d(e,"Plugin",function(){return r.Plugin});var o=n(13);n.d(e,"Template",function(){return o.Template}),n.d(e,"Prop",function(){return o.Prop}),n.d(e,"Children",function(){return o.Children}),n.d(e,"Filter",function(){return o.Filter}),n.d(e,"Reactive",function(){return o.Reactive});var i=n(19);n.d(e,"Taj",function(){return i.Taj})},function(t,e,n){"use strict";n.r(e);var r=n(2);n.d(e,"Component",function(){return r.Component});var o=n(12);n.d(e,"Plugin",function(){return o.Plugin})},function(t,e,n){"use strict";n.r(e),n.d(e,"Component",function(){return f});var r=n(3),o=n(6),i=n(9),u=n(11),c=0,f=function(){function t(){var t=this;this.watchList={},this._$dependency={},this.events_={},Object(i.nextTick)(function(){t._$attachGetterSetter(),t.emit("created")}),null==this.children&&(this.children={})}return t.prototype.addProp=function(t,e){null==this.prototype.$_props&&(this.prototype.$_props={}),this.prototype.$_props=e},t.prototype.watch=function(t,e){null==this.watchList[t]&&(this.watchList[t]=[]),this.watchList[t].push(e)},Object.defineProperty(t.prototype,"unique",{get:function(){return++c},enumerable:!1,configurable:!0}),t.prototype._$attachGetterSetter=function(){var t=this,e=this,n={};(this.$_reactives||[]).forEach(function(r){n[r]=t[r],Object.defineProperty(t,r,{set:function(t){var o=n[r];n[r]=t,Object(i.nextTick)(function(){e.watchList[r]&&e.watchList[r].forEach(function(e){e(t,o)}),e._$updateDOM(r)})},get:function(){return n[r]}}),Array.isArray(t[r])&&Object.defineProperty(t[r],"push",{value:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var o=Array.prototype.push.apply(this,t);return Object(i.nextTick)(function(){e._$onArrayModified(r,"push",t[0])}),o}})})},t.prototype._$onArrayModified=function(t,e,n){var r=this;for(var o in this._$dependency)if(o===t){var i=this._$dependency[o].filter(function(t){return!0===t.forExp});switch(e){case"push":i.forEach(function(e){var o=e.method(n,r[t].length-1);e.lastEl.parentNode.insertBefore(o,e.lastEl.nextSibling),e.lastEl=o})}return void console.log("value",i)}},t.prototype._$updateDOM=function(t){var e=this;for(var n in this._$dependency){if(n===t)return void this._$dependency[n].forEach(function(n){switch(n.nodeType){case 3:n.nodeValue=e[t];break;case 1:n.value=e[t];break;default:if(n.ifExp){var r=n.method();n.el.parentNode.replaceChild(r,n.el),n.el=r}}})}},t.prototype.storeIfExp_=function(t,e,n){var r=this,o=t(),i={el:o,method:t,id:n,ifExp:!0};return e.forEach(function(t){r.storeDependency$$(t,i)}),o},t.prototype.storeForExp_=function(t,e,n){var r=this,o=this[t].map(function(t,n){return e(t,n)}),i=o[o.length-1];return this.storeDependency$$(t,{forExp:!0,method:e,lastEl:i,id:n}),i&&new MutationObserver(function(e,o){if(!1===document.body.contains(i)){o.disconnect();var u=r._$dependency[t].findIndex(function(t){return t.id===n});r._$dependency[t].splice(u,1)}}).observe(this.element_,{childList:!0,subtree:!0}),o},t.prototype.executeRender$$=function(){var t=this,e=this.render||r.ParserUtil.createRenderer(this.template);return console.log("renderer",e),this.element_=e.call(this),Object(i.nextTick)(function(){new MutationObserver(function(e,n){!1===document.body.contains(t.element_)&&(n.disconnect(),t.clearAll$$())}).observe(document.body,{childList:!0,subtree:!0}),t.emit("rendered")}),this.element_},t.prototype.createTextNode=function(t,e){var n=document.createTextNode(t);return e&&this.storeDependency$$(e,n),n},t.prototype.storeDependency$$=function(t,e){null!=this[t]&&(null==this._$dependency[t]?this._$dependency[t]=[e]:this._$dependency[t].findIndex(function(t){return t.id===e.id})<0&&this._$dependency[t].push(e))},t.prototype.createCommentNode=function(){return document.createComment("")},t.prototype.on=function(t,e){return null==this.events_[t]&&(this.events_[t]=[]),this.events_[t].push(e),this},t.prototype.emit=function(t,e){this.events_[t]&&this.events_[t].forEach(function(t){t(e)})},t.prototype.createElement=function(t,e,n){var r,i=this;if(o.HTML_TAG[t]){if(r=document.createElement(t),e.forEach(function(t){r.appendChild(t)}),n.html&&(r.innerHTML=n.html),n.attr){var u=n.attr;for(var c in u)r.setAttribute(c,u[c].v)}if(n.on){var f=n.on;for(var s in f){if(!f[s])throw"Invalid event handler for event "+s+", Handler does not exist";r["on"+s]=f[s].bind(this)}}}else{if(!this.children[t])throw"Invalid Component "+t+". If you have created a component, Please register your component.";var a=new this.children[t],l=[];if(n.attr){u=n.attr;var p=function(t){var e=u[t];a.$_props[t]?(a[t]=e.v,d.watch(e.k,function(e){a[t]=e,a._$updateDOM(t)})):l.push({key:t,value:e.v})},d=this;for(var c in u)p(c)}if(n.on){f=n.on;for(var s in f){if(!f[s])throw"Invalid event handler for event "+s+", Handler does not exist";a.on(s,f[s].bind(this))}}r=a.element_=a.executeRender$$(),l.forEach(function(t){r.setAttribute(t.key,t.value)})}return n.dep&&n.dep.forEach(function(t){i.storeDependency$$(t,r)}),r},t.prototype.clearAll$$=function(){this.events_=null,this.watchList=null,this.emit("destroyed")},t.prototype.query=function(t){return this.element_.querySelector(t)},t.prototype.queryAll=function(t){return this.element_.querySelectorAll(t)},t.prototype.queryByName=function(t){return this.queryAllByName(t)[0]},t.prototype.queryAllByName=function(t){return this.element_.getElementsByName(t)},t.prototype.queryById=function(t){return this.element_.getElementById(t)},t.prototype.onRendered=function(t){this.on("rendered",t)},t.prototype.onCreated=function(t){this.on("created",t)},t.prototype.onDestroyed=function(t){this.on("destroyed",t)},t.prototype.$filter=function(t,e){if(u.globalFilters[t])return u.globalFilters[t](e);if(this.$_filters[t])return this.$_filters[t](e);throw"Can not find filter "+t},t}()},function(t,e,n){"use strict";n.r(e),n.d(e,"ParserUtil",function(){return u});var r=n(4),o=n(5),i=n(6),u=function(){function t(){}return t.createFnFromStringExpression=function(t,e){var n=[],r=t.split(" ").map(function(t){switch(t){case"&&":case"||":case"true":case"":case"false":return t;default:return n.push(t),"ctx."+t}}).join(" ");return e&&e(n),r},t.parseview=function(e){return e=e.replace(new RegExp("\n","g"),"").trim(),r.parse(e,{createFnFromStringExpression:t.createFnFromStringExpression})},t.createRenderer=function(e){var n=t.parseview(e);if(console.log("compiled",n),n.view&&n.view.forExp)throw new o.LogHelper(i.ERROR_TYPE.ForExpAsRoot,e).get();var r="const ctx= this; \n        const ce= ctx.createElement.bind(ctx);\n        const ct= ctx.createTextNode.bind(ctx);\n        const cc= ctx.createCommentNode;\n        const sife= ctx.storeIfExp_.bind(ctx);\n        const sfore= ctx.storeForExp_.bind(ctx);\n        const unique= ctx.unique;\n        const f= ctx.$filter.bind(this);\n        ",u=function(e){var n="";if(e.view){var r=[],o=function(){var t="ce('"+e.view.tag+"',";if(e.child){var n,r,o=[],i=function(t){e.child[r].view.ifExpModified=n,n=null,console.log("if cond modified",r,e.child[r]);for(var i=r+1;i<t;i++)o.push(i)};e.child.forEach(function(t,e){if(t.view&&t.view.ifExp){var o=t.view.ifExp;o.ifCond?(n={ifExp:o.ifCond,ifElseList:[]},r=e):o.elseIfCond?n.ifElseList.push(t):o.else?n.else=t:i(e)}}),n&&i(e.child.length),console.log("indexOfIfCond",o),e.child=e.child.filter(function(t,e){return o.indexOf(e)<0});var c="[";e.child.forEach(function(t){c+="  "+u(t)+",\n                            "}),t+=c+="]"}else t+="[]";return t},i=function(){var t=",{",n=e.view.events.length;if(n>0){var o="",i=/\b(?!(?:false|true\b))([a-zA-Z]+)/g;e.view.events.forEach(function(t,e){o+=t.name+":"+t.handler.replace(i,"ctx.$1"),e+1<n&&(o+=",")}),t+="on:{"+o+"}"}else e.view.model&&(t+="on:{input:(e)=>{\n                            ctx."+e.view.model+"= e.target.value;\n                        }}",e.view.attr.push({isBind:!0,key:"value",value:e.view.model}),r.push(e.view.model));e.view.html&&(t+=(t.length>2?",":"")+" html:ctx."+e.view.html);var u=e.view.attr,c=u.length;if(c>0){var f="";u.forEach(function(t,e){t.isBind?f+=t.key+":{v:ctx."+t.value+",k:'"+t.value+"'}":f+=t.key+":{v:'"+t.value+"'}",e+1<c&&(f+=",")}),t+=(t.length>2?",":"")+" attr:{"+f+"}"}var s=r.length;if(s>0){var a="[";r.forEach(function(t,e){a+="'"+t+"'",e+1<s&&(a+=",")}),a+="]",t+=(t.length>2?",":"")+" dep:"+a}return t+="})"},c=e.view.ifExpModified;if(c&&c.ifExp){var f="[",s=t.createFnFromStringExpression(c.ifExp,function(t){t.forEach(function(t){f+="'"+t+"',"})});n+="sife(()=>{return "+s+" ? "+(o()+i()),c.ifElseList.forEach(function(e){var r=t.createFnFromStringExpression(e.view.ifExp.elseIfCond,function(t){t.forEach(function(t){f+="'"+t+"',"})});n+=":"+r+" ? "+u(e)+" "}),f+="]";var a=void 0;a=c.else?u(c.else):"cc()",n+=":"+a+" },"+f+",unique)"}else e.view.forExp?n+=function(n){var r,o=e.view.forExp;o.value=t.createFnFromStringExpression(o.value,function(t){r=t[0]});var i=function(t){return new RegExp(t,"g")};return"...sfore('"+r+"',("+o.key+","+o.index+")=>{\n                                return "+n.replace(i("ctx."+o.key),o.key).replace(i("ctx."+o.index),o.index)+"\n                            },unique)\n                    "}(o()+i()):n+=o()+i()}else if(e.mustacheExp){n+="ct(";var l="";e.filters.forEach(function(t){n+="f('"+t+"',",l+=")"}),n+=t.createFnFromStringExpression(e.mustacheExp)+" "+l+",'"+e.mustacheExp+"')"}else n+="ct('"+e+"')";return n};return r+="return "+u(n),console.log("renderer",r),new Function(r)},t}()},function(t,e,n){"use strict";function r(t,e,n,o){this.message=t,this.expected=e,this.found=n,this.location=o,this.name="SyntaxError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(this,r)}!function(t,e){function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n}(r,Error),r.buildMessage=function(t,e){var n={literal:function(t){return'"'+o(t.text)+'"'},class:function(t){var e,n="";for(e=0;e<t.parts.length;e++)n+=t.parts[e]instanceof Array?i(t.parts[e][0])+"-"+i(t.parts[e][1]):i(t.parts[e]);return"["+(t.inverted?"^":"")+n+"]"},any:function(t){return"any character"},end:function(t){return"end of input"},other:function(t){return t.description}};function r(t){return t.charCodeAt(0).toString(16).toUpperCase()}function o(t){return t.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(t){return"\\x0"+r(t)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(t){return"\\x"+r(t)})}function i(t){return t.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(t){return"\\x0"+r(t)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(t){return"\\x"+r(t)})}return"Expected "+function(t){var e,r,o,i=new Array(t.length);for(e=0;e<t.length;e++)i[e]=(o=t[e],n[o.type](o));if(i.sort(),i.length>0){for(e=1,r=1;e<i.length;e++)i[e-1]!==i[e]&&(i[r]=i[e],r++);i.length=r}switch(i.length){case 1:return i[0];case 2:return i[0]+" or "+i[1];default:return i.slice(0,-1).join(", ")+", or "+i[i.length-1]}}(t)+" but "+function(t){return t?'"'+o(t)+'"':"end of input"}(e)+" found."},t.exports={SyntaxError:r,parse:function(t,e){e=void 0!==e?e:{};var n,o={},i={Exp:Jt},u=Jt,c=function(t,e){return{view:t,child:e}},f=function(t,e,n,r,o,i,u){return{tag:t,ifExp:e,events:o,forExp:r,attr:i,model:n,html:u}},s=function(t){return t},a=Zt("Whitespace"),l=/^[ \t]/,p=Ht([" ","\t"],!1,!1),d=Zt("One or more whitespaces"),h=function(t){return null},v="#if(",y=zt("#if(",!1),m=")",g=zt(")",!1),x=function(t){return{ifCond:t}},_="#else-if(",b=zt("#else-if(",!1),E=function(t){return{elseIfCond:t}},A="#else",w=zt("#else",!1),O=function(){return{else:!0}},$="#model",P=zt("#model",!1),j="(",C=zt("(",!1),T=function(t){return t},R="#for(",S=zt("#for(",!1),F="in",M=zt("in",!1),k=function(t,e,n){return{key:t,value:n,index:e||"i"}},L=":",q=zt(":",!1),I="=",N=zt("=",!1),D=function(t,e,n){return{key:e,value:n,isBind:null!=t}},B=",",z=zt(",",!1),H=function(t){return t},Z="#html",G=zt("#html",!1),Y=function(t){return t},U=Zt("<"),W=/^[<]/,J=Ht(["<"],!1,!1),V=Zt("</"),K=/^[\/]/,Q=Ht(["/"],!1,!1),X=Zt(">"),tt=/^[>]/,et=Ht([">"],!1,!1),nt="/",rt=zt("/",!1),ot=Zt("identifier"),it=/^[a-zA-Z]/,ut=Ht([["a","z"],["A","Z"]],!1,!1),ct=function(t){return t.join("")},ft=Zt("mustache expression"),st="{{",at=zt("{{",!1),lt="}}",pt=zt("}}",!1),dt=function(t,e,n){return{mustacheExp:t+(e||""),filters:n}},ht=Zt("filter"),vt="|",yt=zt("|",!1),mt=function(t){return t},gt="||",xt=zt("||",!1),_t=function(t){return"||"+t},bt=Zt("event syntax"),Et="on:",At=zt("on:",!1),wt=function(t,e){return{name:t,handler:e}},Ot=Zt("Expression"),$t=/^[a-zA-Z& |.]/,Pt=Ht([["a","z"],["A","Z"],"&"," ","|","."],!1,!1),jt=Zt("Event Assignment"),Ct=/^[a-zA-Z0-9&=>{}() |]/,Tt=Ht([["a","z"],["A","Z"],["0","9"],"&","=",">","{","}","(",")"," ","|"],!1,!1),Rt=Zt("html"),St=/^[a-zA-Z& .]/,Ft=Ht([["a","z"],["A","Z"],"&"," ","."],!1,!1),Mt=Zt("string"),kt=/^['\/"]/,Lt=Ht(["'","/",'"'],!1,!1),qt=0,It=[{line:1,column:1}],Nt=0,Dt=[],Bt=0;if("startRule"in e){if(!(e.startRule in i))throw new Error("Can't start parsing from rule \""+e.startRule+'".');u=i[e.startRule]}function zt(t,e){return{type:"literal",text:t,ignoreCase:e}}function Ht(t,e,n){return{type:"class",parts:t,inverted:e,ignoreCase:n}}function Zt(t){return{type:"other",description:t}}function Gt(e){var n,r=It[e];if(r)return r;for(n=e-1;!It[n];)n--;for(r={line:(r=It[n]).line,column:r.column};n<e;)10===t.charCodeAt(n)?(r.line++,r.column=1):r.column++,n++;return It[e]=r,r}function Yt(t,e){var n=Gt(t),r=Gt(e);return{start:{offset:t,line:n.line,column:n.column},end:{offset:e,line:r.line,column:r.column}}}function Ut(t){qt<Nt||(qt>Nt&&(Nt=qt,Dt=[]),Dt.push(t))}function Wt(t,e,n){return new r(r.buildMessage(t,e),t,e,n)}function Jt(){return function e(){var n,r,i,u;if(n=qt,(r=function(){var e,n,r,i,u,c,s,a,l,p,d;if(e=qt,(n=function(){var e;return Bt++,W.test(t.charAt(qt))?(e=t.charAt(qt),qt++):(e=o,0===Bt&&Ut(J)),Bt--,e===o&&0===Bt&&Ut(U),e}())!==o)if((r=Xt())!==o){for(i=[],u=Vt();u!==o;)i.push(u),u=Vt();if(i!==o)if((u=function(){var e,n,r,i;return e=qt,t.substr(qt,4)===v?(n=v,qt+=4):(n=o,0===Bt&&Ut(y)),n!==o&&(r=re())!==o?(41===t.charCodeAt(qt)?(i=m,qt++):(i=o,0===Bt&&Ut(g)),i!==o?(n=x(r),e=n):(qt=e,e=o)):(qt=e,e=o),e}())===o&&(u=function(){var e,n,r,i;return e=qt,t.substr(qt,9)===_?(n=_,qt+=9):(n=o,0===Bt&&Ut(b)),n!==o&&(r=re())!==o?(41===t.charCodeAt(qt)?(i=m,qt++):(i=o,0===Bt&&Ut(g)),i!==o?(n=E(r),e=n):(qt=e,e=o)):(qt=e,e=o),e}())===o&&(u=function(){var e;return qt,t.substr(qt,5)===A?(e=A,qt+=5):(e=o,0===Bt&&Ut(w)),e!==o&&(e=O()),e}()),u===o&&(u=null),u!==o)if((c=function(){var e,n,r,i,u;return e=qt,t.substr(qt,6)===$?(n=$,qt+=6):(n=o,0===Bt&&Ut(P)),n!==o?(40===t.charCodeAt(qt)?(r=j,qt++):(r=o,0===Bt&&Ut(C)),r!==o&&(i=Xt())!==o?(41===t.charCodeAt(qt)?(u=m,qt++):(u=o,0===Bt&&Ut(g)),u!==o?(n=T(i),e=n):(qt=e,e=o)):(qt=e,e=o)):(qt=e,e=o),e}())===o&&(c=null),c!==o)if((s=function(){var e,n,r,i,u,c,f,s,a,l,p,d;if(e=qt,t.substr(qt,5)===R?(n=R,qt+=5):(n=o,0===Bt&&Ut(S)),n!==o){for(r=[],i=Kt();i!==o;)r.push(i),i=Kt();if(r!==o)if((i=Xt())!==o){for(u=[],c=Kt();c!==o;)u.push(c),c=Kt();if(u!==o)if((c=function(){var e,n,r,i;if(e=qt,44===t.charCodeAt(qt)?(n=B,qt++):(n=o,0===Bt&&Ut(z)),n!==o){for(r=[],i=Kt();i!==o;)r.push(i),i=Kt();r!==o&&(i=Xt())!==o?(n=H(i),e=n):(qt=e,e=o)}else qt=e,e=o;return e}())===o&&(c=null),c!==o){for(f=[],s=Kt();s!==o;)f.push(s),s=Kt();if(f!==o)if(t.substr(qt,2)===F?(s=F,qt+=2):(s=o,0===Bt&&Ut(M)),s!==o){for(a=[],l=Kt();l!==o;)a.push(l),l=Kt();if(a!==o)if((l=Xt())!==o){for(p=[],d=Kt();d!==o;)p.push(d),d=Kt();p!==o?(41===t.charCodeAt(qt)?(d=m,qt++):(d=o,0===Bt&&Ut(g)),d!==o?(n=k(i,c,l),e=n):(qt=e,e=o)):(qt=e,e=o)}else qt=e,e=o;else qt=e,e=o}else qt=e,e=o;else qt=e,e=o}else qt=e,e=o;else qt=e,e=o}else qt=e,e=o;else qt=e,e=o}else qt=e,e=o;return e}())===o&&(s=null),s!==o){for(a=[],l=ne();l!==o;)a.push(l),l=ne();if(a!==o){for(l=[],p=Vt();p!==o;)l.push(p),p=Vt();if(l!==o){for(p=[],d=Qt();d!==o;)p.push(d),d=Qt();p!==o?((d=function(){var e,n,r,i,u,c,f;if(e=qt,t.substr(qt,5)===Z?(n=Z,qt+=5):(n=o,0===Bt&&Ut(G)),n!==o){for(r=[],i=Kt();i!==o;)r.push(i),i=Kt();r!==o?(61===t.charCodeAt(qt)?(i=I,qt++):(i=o,0===Bt&&Ut(N)),i!==o?((u=ie())===o&&(u=null),u!==o&&(c=Xt())!==o?((f=ie())===o&&(f=null),f!==o?(n=Y(c),e=n):(qt=e,e=o)):(qt=e,e=o)):(qt=e,e=o)):(qt=e,e=o)}else qt=e,e=o;return e}())===o&&(d=null),d!==o&&function(){var e,n,r;return Bt++,e=qt,47===t.charCodeAt(qt)?(n=nt,qt++):(n=o,0===Bt&&Ut(rt)),n===o&&(n=null),n!==o?(tt.test(t.charAt(qt))?(r=t.charAt(qt),qt++):(r=o,0===Bt&&Ut(et)),r!==o?e=n=[n,r]:(qt=e,e=o)):(qt=e,e=o),Bt--,e===o&&(n=o,0===Bt&&Ut(X)),e}()!==o?(n=f(r,u,c,s,a,p,d),e=n):(qt=e,e=o)):(qt=e,e=o)}else qt=e,e=o}else qt=e,e=o}else qt=e,e=o;else qt=e,e=o;else qt=e,e=o;else qt=e,e=o}else qt=e,e=o;else qt=e,e=o;return e}())!==o){for(i=[],(u=e())===o&&(u=oe())===o&&(u=te());u!==o;)i.push(u),(u=e())===o&&(u=oe())===o&&(u=te());i!==o?((u=function(){var e,n,r;return e=qt,(n=function(){var e,n,r;return Bt++,e=qt,W.test(t.charAt(qt))?(n=t.charAt(qt),qt++):(n=o,0===Bt&&Ut(J)),n!==o?(K.test(t.charAt(qt))?(r=t.charAt(qt),qt++):(r=o,0===Bt&&Ut(Q)),r!==o?e=n=[n,r]:(qt=e,e=o)):(qt=e,e=o),Bt--,e===o&&(n=o,0===Bt&&Ut(V)),e}())!==o&&(r=Xt())!==o&&function(){var e;return Bt++,tt.test(t.charAt(qt))?(e=t.charAt(qt),qt++):(e=o,0===Bt&&Ut(et)),Bt--,e===o&&0===Bt&&Ut(X),e}()!==o?(n=s(r),e=n):(qt=e,e=o),e}())===o&&(u=null),u!==o?(r=c(r,i),n=r):(qt=n,n=o)):(qt=n,n=o)}else qt=n,n=o;return n}()}function Vt(){var e;return Bt++,l.test(t.charAt(qt))?(e=t.charAt(qt),qt++):(e=o,0===Bt&&Ut(p)),Bt--,e===o&&0===Bt&&Ut(a),e}function Kt(){var t,e,n;if(Bt++,t=qt,e=[],(n=Vt())!==o)for(;n!==o;)e.push(n),n=Vt();else e=o;return e!==o&&(e=h(e)),Bt--,(t=e)===o&&(e=o,0===Bt&&Ut(d)),t}function Qt(){var e,n,r,i,u,c,f,s;if(e=qt,58===t.charCodeAt(qt)?(n=L,qt++):(n=o,0===Bt&&Ut(q)),n===o&&(n=null),n!==o)if((r=Xt())!==o){for(i=[],u=Kt();u!==o;)i.push(u),u=Kt();if(i!==o)if(61===t.charCodeAt(qt)?(u=I,qt++):(u=o,0===Bt&&Ut(N)),u!==o)if(ie()!==o)if((c=Xt())!==o)if(ie()!==o){for(f=[],s=Kt();s!==o;)f.push(s),s=Kt();f!==o?e=n=D(n,r,c):(qt=e,e=o)}else qt=e,e=o;else qt=e,e=o;else qt=e,e=o;else qt=e,e=o;else qt=e,e=o}else qt=e,e=o;else qt=e,e=o;return e}function Xt(){var e,n,r;if(Bt++,e=qt,n=[],it.test(t.charAt(qt))?(r=t.charAt(qt),qt++):(r=o,0===Bt&&Ut(ut)),r!==o)for(;r!==o;)n.push(r),it.test(t.charAt(qt))?(r=t.charAt(qt),qt++):(r=o,0===Bt&&Ut(ut));else n=o;return n!==o&&(n=ct(n)),Bt--,(e=n)===o&&(n=o,0===Bt&&Ut(ot)),e}function te(){var e,n,r,i,u,c,f,s;if(Bt++,e=qt,t.substr(qt,2)===st?(n=st,qt+=2):(n=o,0===Bt&&Ut(at)),n!==o)if((r=oe())!==o)if((i=function(){var e,n,r;return e=qt,t.substr(qt,2)===gt?(n=gt,qt+=2):(n=o,0===Bt&&Ut(xt)),n!==o&&(r=oe())!==o?(n=_t(r),e=n):(qt=e,e=o),e}())===o&&(i=null),i!==o){for(u=[],c=ee();c!==o;)u.push(c),c=ee();if(u!==o){for(c=[],f=Kt();f!==o;)c.push(f),f=Kt();if(c!==o){if(f=[],t.substr(qt,2)===lt?(s=lt,qt+=2):(s=o,0===Bt&&Ut(pt)),s!==o)for(;s!==o;)f.push(s),t.substr(qt,2)===lt?(s=lt,qt+=2):(s=o,0===Bt&&Ut(pt));else f=o;f!==o?e=n=dt(r,i,u):(qt=e,e=o)}else qt=e,e=o}else qt=e,e=o}else qt=e,e=o;else qt=e,e=o;else qt=e,e=o;return Bt--,e===o&&(n=o,0===Bt&&Ut(ft)),e}function ee(){var e,n,r,i,u;for(Bt++,e=qt,n=[],r=Kt();r!==o;)n.push(r),r=Kt();if(n!==o)if(124===t.charCodeAt(qt)?(r=vt,qt++):(r=o,0===Bt&&Ut(yt)),r!==o){for(i=[],u=Kt();u!==o;)i.push(u),u=Kt();i!==o&&(u=Xt())!==o?e=n=mt(u):(qt=e,e=o)}else qt=e,e=o;else qt=e,e=o;return Bt--,e===o&&(n=o,0===Bt&&Ut(ht)),e}function ne(){var e,n,r,i,u,c,f;if(Bt++,e=qt,t.substr(qt,3)===Et?(n=Et,qt+=3):(n=o,0===Bt&&Ut(At)),n!==o)if((r=Xt())!==o)if(61===t.charCodeAt(qt)?(i=I,qt++):(i=o,0===Bt&&Ut(N)),i!==o)if(ie()!==o)if((u=function(){var e,n,r;if(Bt++,e=qt,n=[],Ct.test(t.charAt(qt))?(r=t.charAt(qt),qt++):(r=o,0===Bt&&Ut(Tt)),r!==o)for(;r!==o;)n.push(r),Ct.test(t.charAt(qt))?(r=t.charAt(qt),qt++):(r=o,0===Bt&&Ut(Tt));else n=o;return n!==o&&(n=ct(n)),Bt--,(e=n)===o&&(n=o,0===Bt&&Ut(jt)),e}())!==o){if(c=[],(f=ie())!==o)for(;f!==o;)c.push(f),f=ie();else c=o;c!==o?e=n=wt(r,u):(qt=e,e=o)}else qt=e,e=o;else qt=e,e=o;else qt=e,e=o;else qt=e,e=o;else qt=e,e=o;return Bt--,e===o&&(n=o,0===Bt&&Ut(bt)),e}function re(){var e,n,r;if(Bt++,e=qt,n=[],$t.test(t.charAt(qt))?(r=t.charAt(qt),qt++):(r=o,0===Bt&&Ut(Pt)),r!==o)for(;r!==o;)n.push(r),$t.test(t.charAt(qt))?(r=t.charAt(qt),qt++):(r=o,0===Bt&&Ut(Pt));else n=o;return n!==o&&(n=ct(n)),Bt--,(e=n)===o&&(n=o,0===Bt&&Ut(Ot)),e}function oe(){var e,n,r;if(Bt++,e=qt,n=[],St.test(t.charAt(qt))?(r=t.charAt(qt),qt++):(r=o,0===Bt&&Ut(Ft)),r!==o)for(;r!==o;)n.push(r),St.test(t.charAt(qt))?(r=t.charAt(qt),qt++):(r=o,0===Bt&&Ut(Ft));else n=o;return n!==o&&(n=ct(n)),Bt--,(e=n)===o&&(n=o,0===Bt&&Ut(Rt)),e}function ie(){var e;return Bt++,kt.test(t.charAt(qt))?(e=t.charAt(qt),qt++):(e=o,0===Bt&&Ut(Lt)),Bt--,e===o&&0===Bt&&Ut(Mt),e}if((n=u())!==o&&qt===t.length)return n;throw n!==o&&qt<t.length&&Ut({type:"end"}),Wt(Dt,Nt<t.length?t.charAt(Nt):null,Nt<t.length?Yt(Nt,Nt+1):Yt(Nt,Nt))}}},function(t,e,n){"use strict";n.r(e),n.d(e,"LogHelper",function(){return o});var r=n(6),o=function(){function t(t,e){this.type=t,this.info_=e,this.message=this.getMsg_()}return t.prototype.logError=function(){console.error(this.get())},t.prototype.logWarning=function(){console.warn(this.get())},t.prototype.get=function(){return{message:this.message,type:this.type}},t.prototype.getMsg_=function(){var t;switch(this.type){case r.ERROR_TYPE.SynTaxError:t=this.info_;break;case r.ERROR_TYPE.ForExpAsRoot:t="For is not allowed in root element. Create a child element instead. \n                template : "+this.info_+"\n                ";break;default:t=this.message}return t},t}()},function(t,e,n){"use strict";n.r(e);var r=n(7);n.d(e,"ERROR_TYPE",function(){return r.ERROR_TYPE});var o=n(8);n.d(e,"HTML_TAG",function(){return o.HTML_TAG})},function(t,e,n){"use strict";var r;n.r(e),n.d(e,"ERROR_TYPE",function(){return r}),function(t){t.SynTaxError="syntax_error",t.ForExpAsRoot="for_exp_as_root"}(r||(r={}))},function(t,e,n){"use strict";var r;n.r(e),n.d(e,"HTML_TAG",function(){return r}),function(t){t[t.div=1]="div",t[t.p=1]="p",t[t.b=1]="b",t[t.span=1]="span",t[t.input=1]="input",t[t.u=1]="u",t[t.button=1]="button",t[t.table=1]="table",t[t.tr=1]="tr",t[t.td=1]="td",t[t.thead=1]="thead",t[t.tbody=1]="tbody",t[t.tfoot=1]="tfoot",t[t.strong=1]="strong"}(r||(r={}))},function(t,e,n){"use strict";n.r(e);var r=n(10);n.d(e,"nextTick",function(){return r.nextTick})},function(t,e,n){"use strict";n.r(e),n.d(e,"nextTick",function(){return r});var r=queueMicrotask||function(t){setTimeout(t,10)}},function(t,e,n){"use strict";n.r(e),n.d(e,"globalFilters",function(){return r});var r={toS:function(t){switch(typeof t){case"string":return t;case"number":return t.toString();default:return JSON.stringify(t)}}}},function(t,e,n){"use strict";n.r(e),n.d(e,"Plugin",function(){return r});var r=function(){return function(){}}()},function(t,e,n){"use strict";n.r(e);var r=n(14);n.d(e,"Template",function(){return r.Template});var o=n(15);n.d(e,"Prop",function(){return o.Prop});var i=n(16);n.d(e,"Children",function(){return i.Children});var u=n(17);n.d(e,"Filter",function(){return u.Filter});var c=n(18);n.d(e,"Reactive",function(){return c.Reactive})},function(t,e,n){"use strict";n.r(e),n.d(e,"Template",function(){return i});var r,o=(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),i=function(t){return function(e){return function(e){function n(){var n=null!==e&&e.apply(this,arguments)||this;return n.template=t,n}return o(n,e),n}(e)}}},function(t,e,n){"use strict";function r(t){return function(e,n){e.$_props||(e.$_props={}),e.$_props[n]=t}}n.r(e),n.d(e,"Prop",function(){return r})},function(t,e,n){"use strict";n.r(e),n.d(e,"Children",function(){return i});var r,o=(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),i=function(t){return function(e){return function(e){function n(){var n=null!==e&&e.apply(this,arguments)||this;return n.children=t,n}return o(n,e),n}(e)}}},function(t,e,n){"use strict";n.r(e),n.d(e,"Filter",function(){return r});var r=function(t){return function(e,n,r){e.$_filters||(e.$_filters={}),e.$_filters[t||n]=e[n]}}},function(t,e,n){"use strict";function r(t,e){t.$_reactives||(t.$_reactives=[]),t.$_reactives.push(e)}n.r(e),n.d(e,"Reactive",function(){return r})},function(t,e,n){"use strict";n.r(e),n.d(e,"Taj",function(){return i});var r=n(1),o=n(11),i=function(){function t(t,e){this.plugins_=[],this.component=t,this.element=e}return t.prototype.create=function(){var t=new this.component;this.element.appendChild(t.executeRender$$())},t.prototype.addPlugin=function(t,e){(new t).setup(r.Component,e),this.plugins_.push(t)},t.prototype.filters=function(t,e){o.globalFilters[t]=e},t}()}])},function(t,e){
/*!
 * @license :taj-store - V1.0.0 - 23/08/2020
 * https://github.com/ujjwalguptaofficial/taj
 * Copyright (c) 2020 @Ujjwal Gupta; Licensed ISC
 */
t.exports=function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);var r=n(1);n.d(e,"Plugin",function(){return r.Plugin});var o=n(3);for(var i in o)["default","Plugin"].indexOf(i)<0&&function(t){n.d(e,t,function(){return o[t]})}(i)},function(t,e,n){"use strict";n.r(e),n.d(e,"Plugin",function(){return o});var r=n(2),o=function(){function t(){}return t.prototype.setup=function(t,e){t.prototype.$store=e},t.prototype.createStore=function(t){return new r.Store(t)},t}()},function(t,e,n){"use strict";n.r(e),n.d(e,"Store",function(){return r});var r=function(){function t(t){this.getter=t.getter||{},this.mutation=t.mutation||{},this.state=t.state||{},this.task=t.task||{}}return t.prototype.execute=function(t,e){return this.task[t]({getter:this.getter,commit:this.commit,execute:this.execute,state:this.state},e)},t.prototype.commit=function(t,e){this.mutation[t](this.state,e)},t}()},function(t,e,n){"use strict";n.r(e);var r=n(4);for(var o in r)["default"].indexOf(o)<0&&function(t){n.d(e,t,function(){return r[t]})}(o)},function(t,e){}])},function(t,e,n){"use strict";n.r(e);var r,o=n(0),i=n(1),u=function(){return function(){this.state={students:[]},this.mutation={addStudent:function(t,e){t.students.push(e)}},this.getter={},this.task={}}}(),c=(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),f=function(t,e,n,r){var o,i=arguments.length,u=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(t,e,n,r);else for(var c=t.length-1;c>=0;c--)(o=t[c])&&(u=(i<3?o(u):i>3?o(e,n,u):o(e,n))||u);return i>3&&u&&Object.defineProperty(e,n,u),u},s=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.students=[{name:"ujjwal"}],e}return c(e,t),e=f([Object(o.Template)("<div #for(student in students)>{{student.name}}</div>")],e)}(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return c(e,t),e}(o.Component)),a=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),l=function(t,e,n,r){var o,i=arguments.length,u=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(t,e,n,r);else for(var c=t.length-1;c>=0;c--)(o=t[c])&&(u=(i<3?o(u):i>3?o(e,n,u):o(e,n))||u);return i>3&&u&&Object.defineProperty(e,n,u),u},p=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return a(e,t),e=l([Object(o.Template)("<Student/>"),Object(o.Children)({Student:s})],e)}(o.Component),d=new o.Taj(p,document.querySelector("#app"));d.addPlugin(i.Plugin,u),d.create()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,